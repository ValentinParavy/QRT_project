# -*- coding: utf-8 -*-
"""get_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D0Am-s4ekBuO6p9QJ7njNYQ_-3CFMLvV
"""

import pandas as pd
import numpy as np
import os
import sys
from google.colab import drive
drive.mount('/content/drive')
  
def get_data_path():
  return './drive/My Drive/QRT_FOOT_DATA_CHALLENGE/Utilities/Data'
 
def get_features_importance():
    features_importance = pd.read_csv('df_feature_importances.csv')
    return features_importance

def get_test_data_normalized_features_low_importance_dropped_and_correlated_features():
    test = pd.read_csv('test_data_filled_dropped_corr.csv')
    return test
    
def get_train_data_normalized_features_low_importance_dropped_and_correlated_features():
    train = pd.read_csv('train_data_filled_dropped_corr.csv')
    train_scores = pd.read_csv('Y_train.csv')
    train_scores = train_scores.loc[train.index]
    return train, train_scores
    
def get_test_data_normalized_features_low_importance_dropped():
  test = pd.read_csv('test_data_normalized_low_importance_dropped.csv')
  return test

def get_test_data_non_normalized_features_low_importance_dropped():
  test = pd.read_csv('test_data_non_normalized_low_importance_dropped.csv')
  return test
  
def get_train_data_normalized_features_low_importance_dropped():
  train = pd.read_csv('train_data_normalized_low_importance_dropped.csv')
  train_scores = pd.read_csv('Y_train.csv')

  train_scores = train_scores.loc[train.index]
  return train, train_scores

def get_train_data_non_normalized_features_low_importance_dropped():
  train =  pd.read_csv('train_data_non_normalized_low_importance_dropped.csv')
  train_scores = pd.read_csv('Y_train.csv')

  train_scores = train_scores.loc[train.index]
  return train, train_scores

def get_test_data_features_and_nan_processed(path = get_data_path()):

  test_processed = pd.read_csv('test_data_features_and_nan_processed.csv')
  return test_processed
  
def get_train_data_features_and_nan_processed(path = get_data_path()):

  train_processed = pd.read_csv('train_data_features_and_nan_processed.csv')
  train_scores = pd.read_csv('Y_train.csv')

  train_scores = train_scores.loc[train_processed.index]
  return train_processed, train_scores
  
def get_test_processed(path = get_data_path()):

  test_processed = pd.read_csv('test_data_processed.csv')
  return test_processed
  
def get_train_processed(path = get_data_path()):

  train_processed = pd.read_csv('train_data_processed.csv')
  train_scores = pd.read_csv('Y_train.csv')

  train_scores = train_scores.loc[train_processed.index]

  return train_processed, train_scores
  
def get_train(path = get_data_path(), drop_league = True):

  train_home_team = pd.read_csv('Train_Data/train_home_team_statistics_df.csv', index_col=0)
  train_away_team = pd.read_csv('Train_Data/train_away_team_statistics_df.csv', index_col=0)

  train_scores = pd.read_csv('Y_train.csv', index_col=0)

  if(drop_league):
    train_home = train_home_team.iloc[:,2:]
    train_away = train_away_team.iloc[:,2:]

  train_home.columns = 'HOME_' + train_home.columns
  train_away.columns = 'AWAY_' + train_away.columns

  train_data =  pd.concat([train_home,train_away],join='inner',axis=1)
  train_scores = train_scores.loc[train_data.index]

  train_data = train_data.replace({np.inf:np.nan,-np.inf:np.nan})

  return train_data, train_scores

def get_test(path = get_data_path(), drop_league = True):

  test_home = pd.read_csv('Test_Data/test_home_team_statistics_df.csv', index_col=0)
  test_away = pd.read_csv('Test_Data/test_away_team_statistics_df.csv', index_col=0)

  test_home.columns = 'HOME_' + test_home.columns
  test_away.columns = 'AWAY_' + test_away.columns

  test_data =  pd.concat([test_home,test_away],join='inner',axis=1)

  return test_data

os.chdir('/content/drive/My Drive/QRT_FOOT_DATA_CHALLENGE/Utilities/Data/')

get_test()